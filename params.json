{"name":"Robot Vision Control","body":"# Robot Vision Control\r\n\r\nRobot Vision Control (RVC) allows Chrome browsers to control a host machine the\r\nsame way one would through applications like RDP or VNC.\r\n\r\n## Requirements\r\n\r\n- [java][java] >= 1.6\r\n- CLI users: n8han's [cs][cs] (follow instructions on README)\r\n- GUI users: [rvc app][app] (double-click executable)\r\n\r\n[cs]: https://github.com/n8han/conscript#readme\r\n[java]: http://java.com/en/download/index.jsp\r\n[app]: http://philcali.github.com/robot-vision/rvc.jar\r\n\r\n## CLI Installation\r\n\r\nThese instructions are for those who would rather install this app for primary\r\nlaunching from the command-line.\r\n\r\n```\r\n> cs philcali/robot-vision\r\n```\r\n\r\nLaunch the app with:\r\n\r\n```\r\n> rvc -j web\r\n```\r\n\r\n## Mirrors\r\n\r\nWhether you downloaded the thick swing app or the cli version, you can test it\r\nout by directing your browser: [http://localhost:8080/robot-vision.html][locally].\r\n\r\n[locally]: http://localhost:8080/robot-vision.html\r\n\r\nIf the app is running properly, you will be greeted with the endless mirrors of\r\nyour desktop! Of course, now it's time for you to connect to the host machine\r\n_remotely_, which is the point of this application.\r\n\r\n## Controlling and Viewing\r\n\r\nRVC was made with the idea of sharing the desktop. Only one person can control\r\nthe machine, while others watch (or participate).\r\n\r\n- `desktop.html` to control the machine\r\n- `robot-vision.html` read only view of the machine\r\n\r\nIf you want to wrap the control scripts around basic auth, then pass in\r\na username and password via `rvc -u user -p password web`.\r\n\r\nIf you want to wrap the viewers in basic auth, use `rvc -v password web`. The\r\nusername for `robot-vision.html` authentication will always be `viewer`.\r\n\r\nKeep in mind, this is plain text auth over http. Read below about using ssl\r\nsecured auth over https.\r\n\r\n## Streaming vs Reloading\r\n\r\nRVC allows for two specific forms of _reloading_ the desktop image. The first\r\nway is a client side loop reloading the image. The second is the _jpeg_ camera\r\ntype streaming to the browser, where the server pushes images to clients.\r\n\r\nThe default behavior is to have javascript reload the scene, but testing showed\r\nthat jpeg camera streams proved to be more fluid. Don't use this method if\r\nyou know clients browsers don't support it.\r\n\r\n## Using a Chrome Extension\r\n\r\nControl communication must be allowed via passing a _key_ to an open web socket\r\nconnection. This means it's possible to __not__ serve the control code (with `-n`),\r\nand inject the needed code using a Chrome Extension.\r\n\r\nThe extension is available at [robot-chrome][vision-ext].\r\n\r\n[vision-ext]: https://chrome.google.com/webstore/detail/ieabafligicoomhcodhiolhlmljhmifi?utm_source=chrome-ntp-icon\r\n\r\n__Note__: Chrome extension integration requires that the `gen` action is run at\r\nleast once to generate the 32 character random string for authentication:\r\n\r\n```\r\nrvc gen\r\n```\r\n\r\nGUI users can simply copy the Chrome key or generate another by clicking on\r\n_Generate_.\r\n\r\n## SSL Properties\r\n\r\nRVC supports https with the `-s` flag. It is important to note that https\r\nrequests will __always__ fail until (at least) two system properties are set:\r\n\r\n1. `netty.ssl.keyStore`\r\n2. `netty.ssl.keyStorePassword`\r\n\r\nSupply the properties with `rvc set prop.key prop.value`.\r\n\r\n```\r\n> rvc set netty.ssl.keyStore /path/to/cert.jks\r\n> rvc set netty.ssl.keyStorePassword secret\r\n```\r\n\r\nRead more on the [wiki][ssl].\r\n\r\n[ssl]: https://github.com/philcali/robot-vision/wiki/Setup-SSL\r\n\r\n## Screen recording\r\n\r\nRVC allows simplistic screen recording by taking a series of snapshots that one\r\ncan later build (automatically or not) into a screencast. ClI users can do so by\r\n passing in the following arguments:\r\n\r\n```\r\n> rvc record /temp/path/to/jpgs\r\n```\r\n\r\n__Note__: in `web` mode, the controller will have an option to initiate and stop\r\na recording remotely. Currently, remote recordings are stored in:\r\n```\r\n{USER-HOME}/recording_{timestamp}\r\n```\r\n\r\nThis program does not build the movie from the images. Instead, you can use\r\nyour favorite program to do that.\r\n\r\nRVC looks at two properties for record:\r\n\r\n- `record.cleanup` - If true and `record.command` is set, then it will clear out\r\n  all the recorded images\r\n- `record.command` - This is executed after the recording is finished and\r\n- `record.dest` - optionally pass in the destination location\r\n\r\nRVC will replace three strings in the command:\r\n\r\n- `{location}` - the location set by the recorder\r\n- `{filename}` - the filename of the movie\r\n- `{dest}` - the directory destination\r\n\r\nIn Linux, one might use ffmpeg to transform the series of jpeg's to a movie\r\nlike so:\r\n\r\n```\r\nffmpeg -r 7 -b 128k -i {location}/%07d.jpg {dest}/{filename}.mp4\r\n```\r\n\r\n## Control Library\r\n\r\nThe `capture-control` library is a wrapper around java utilities used in RVC\r\nfor screen capture image manipulation and remote control.\r\n\r\nFeel free to use it in your projects.\r\n\r\n`libraryDependencies += \"com.github.philcali\" %% \"capture-control\" % \"0.0.2\"`\r\n\r\n## Client Library\r\n\r\nThe client interface is a submodule shared by this application and the Chrome\r\nextension.\r\n\r\nThat code is found at [robot-interface][vision-int].\r\n\r\n[vision-int]: https://github.com/philcali/robot-interface\r\n\r\n## RVC Options\r\n\r\n```\r\nUsage: rvc [OPTIONS] action extras\r\n\r\nOPTIONS\r\n\r\n-b (0.0.0.0)\r\n--bind-address (0.0.0.0)               Web server bind address\r\n\r\n-f framerate 10 (per second)\r\n--framerate framerate 10 (per second)  If in jpeg camera mode, push image data\r\n                                       at specified framerate\r\n\r\n-i 8080\r\n--inet-port 8080                       Web server internet port\r\n\r\n-j\r\n--jpeg-camera                          Serves image data via jpeg camera\r\n                                       transport\r\n\r\n-k /path/to/ssl.properties\r\n--key-store /path/to/ssl.properties    To be used with --secured. This is the\r\n                                       properties file containing netty ssl\r\n                                       info.\r\n\r\n-n\r\n--no-connect                           don't serve up connection js (ideal if\r\n                                       using Chrome extension to connect)\r\n\r\n-p <none>\r\n--password <none>                      password to auth\r\n\r\n-s\r\n--secured                              https server (http)\r\n\r\n-u <none>\r\n--user <none>                          user to auth\r\n\r\n-v <viewer password>\r\n--viewer-password <viewer password>    Separate password for the 'viewer' user\r\n                                       (leave blank for open)\r\n```\r\n\r\n## Vision Actions\r\n\r\nActions are meant to be run once, and done. The remote control server is the\r\nprimary action, but below is the output by running `rvc actions`:\r\n\r\n```\r\n run, web                       Launches embedded server\r\n c, clean-keys                  Wipes stuck inputs\r\n record                         Records actions only\r\n gen, generate-key              Generates a Chrome extension connection key\r\n set, add                       Sets a vision property\r\n remove, rm                     Removes a vision property\r\n list, ls                       Lists vision properties\r\n actions, help                  Displays this list\r\n```\r\n\r\n## Known Issues\r\n\r\n- Screen capturing can be really slow (JVM screencap performance is lousy)\r\n\r\n## License\r\n\r\nThe MIT.\r\n","tagline":"Embedded server to allow remote control over a host machine.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}